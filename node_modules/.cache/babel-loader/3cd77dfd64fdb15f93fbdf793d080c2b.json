{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kolawole Elijah\\\\Desktop\\\\learning\\\\software\\\\udacity\\\\Full Stack Developer Course\\\\API Development and Documentation\\\\triva project\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            // categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getCategories = () => {\n      $.ajax({\n        url: \"/categories\",\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            categories: result.categories\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load categories. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"/questions?cat=\".concat(id),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          }); // console.log(this.categories)\n\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/questions\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.getCategories();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    console.log(this.state.categories);\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.categories.map(id => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, this.state.categories[id], \"dd\", React.createElement(\"img\", {\n      className: \"category\",\n      alt: \"\",\n      src: \"\".concat(this.state.categories[id], \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:\\Users\\Kolawole Elijah\\Desktop\\learning\\software\\udacity\\Full Stack Developer Course\\API Development and Documentation\\triva project\\frontend\\src\\components\\QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","currentCategory","current_category","error","alert","getCategories","categories","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","console","log","map","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: [],\r\n      currentCategory: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n    this.getCategories();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          // categories: result.categories,\r\n          currentCategory: result.current_category \r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  getCategories = () => {\r\n    $.ajax({\r\n      url: `/categories`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          categories: result.categories   \r\n        })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load categories. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `/questions?cat=${id}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        // console.log(this.categories)\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `/questions`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the question?')) {\r\n        $.ajax({\r\n          url: `/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getQuestions();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.categories)\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {this.state.categories.map((id) => (\r\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                {this.state.categories[id]}dd\r\n                <img className=\"category\" alt=\"\" src={`${this.state.categories[id]}.svg`}/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n"]},"metadata":{},"sourceType":"module"}